generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model pic {
  id             String         @id @default(uuid())
  name           String
  phone          String         @unique(map: "pic_phone_key")
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  role           pic_role_enum
  deleted_at     DateTime?  
  pic_external   project[]      @relation("EXTERNAL_PIC")
  pic_segment    project[]      @relation("SEGMENT_PIC")
  pic_midfielder project_init[]
}

model customer {
  id         Int       @id @default(autoincrement())
  name       String    @unique(map: "customer_name_key")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
}

model project {
  id                    String             @id @default(uuid())
  start_date            DateTime
  end_date              DateTime
  subscription_duration Int?
  customer              String
  topic                 String
  status                project_status     @default(initiation)
  pic_external_id       String
  segment               segment_enum
  pic_segment_id        String
  project_init_id       String?            @unique
  project_ongoing_id    String?            @unique
  project_drop_id       String?            @unique
  project_close_out_id  String?            @unique
  passcode              String
  created_at            DateTime           @default(now())
  updated_at            DateTime           @updatedAt
  solution_id           String?            @unique
  tariff                Int
  deleted_at            DateTime?
  creator_id            String?
  updater_id            String?
  requesting_approval   Boolean            @default(false)
  comments              comment?
  created_by            users?             @relation("CREATOR", fields: [creator_id], references: [user_id])
  pic_external          pic                @relation("EXTERNAL_PIC", fields: [pic_external_id], references: [id])
  pic_segment           pic                @relation("SEGMENT_PIC", fields: [pic_segment_id], references: [id])
  project_close_out     project_close_out? @relation(fields: [project_close_out_id], references: [id])
  project_drop          project_drop?      @relation(fields: [project_drop_id], references: [id])
  project_init          project_init?      @relation(fields: [project_init_id], references: [id])
  project_ongoing       project_ongoing?   @relation(fields: [project_ongoing_id], references: [id])
  solution              project_solution?  @relation(fields: [solution_id], references: [id])
  updated_by            users?             @relation("UPDATER", fields: [updater_id], references: [user_id])
}

model project_init {
  id                         String          @id @default(uuid())
  project_id                 String
  nde_request_id             String?         @unique
  midfielder                 String?
  related_unit               String?
  pic_midfielder_id          String?
  mom_req_id                 String?         @unique
  helix                      helix_enum?
  lir_requirement_id         String?         @unique
  requester                  String?
  impact                     String?
  potential_employee_trained Int?
  nde_determination_id       String?         @unique
  potential_revenue          Int?
  approval_status            approval_status @default(draft)
  project                    project?
  lir_requirement            document?       @relation("LIR_REQUIREMENT", fields: [lir_requirement_id], references: [id])
  mom_req                    document?       @relation("MOM_REQ", fields: [mom_req_id], references: [id])
  nde_determination          document?       @relation("NDE_DETERMINATION", fields: [nde_determination_id], references: [id])
  nde_request                document?       @relation("NDE_REQUEST", fields: [nde_request_id], references: [id])
  pic_midfielder             pic?            @relation(fields: [pic_midfielder_id], references: [id])
}

model project_ongoing {
  id                     String          @id @default(uuid())
  project_id             String
  nde_req_cfu_to_mid_id  String?         @unique
  nde_req_mid_to_tcuc_id String?         @unique
  UIC                    String?
  start_access           DateTime?
  end_access             DateTime?
  mom_readiness_id       String?         @unique
  nde_confirmation_id    String?         @unique
  baa_id                 String?         @unique
  bast_id                String?         @unique
  approval_status        approval_status @default(draft)
  project                project?
  baa                    document?       @relation("BAA", fields: [baa_id], references: [id])
  bast                   document?       @relation("BAST", fields: [bast_id], references: [id])
  mom_readiness          document?       @relation("MOM_READINESS", fields: [mom_readiness_id], references: [id])
  nde_confirmation       document?       @relation("NDE_CONFIRMATION", fields: [nde_confirmation_id], references: [id])
  nde_req_cfu_to_mid     document?       @relation("NDE_REQ_CFU_TO_MID", fields: [nde_req_cfu_to_mid_id], references: [id])
  nde_req_mid_to_tcuc    document?       @relation("NDE_REQ_MID_TO_TCUC", fields: [nde_req_mid_to_tcuc_id], references: [id])
}

model project_drop {
  id                  String          @id @default(uuid())
  project_id          String
  nde_project_drop_id String?         @unique
  approval_status     approval_status @default(draft)
  project             project?
  nde_project_drop    document?       @relation("NDE_PROJECT_DROP", fields: [nde_project_drop_id], references: [id])
}

model project_close_out {
  id                         String          @id @default(uuid())
  project_id                 String
  mom_reconciles_id          String?         @unique
  nde_revenue_recognition_id String?         @unique
  employee_trained           Int?
  revenue_in                 Int?
  report_project_id          String?         @unique
  nde_report_project_id      String?         @unique
  nps_id                     String?         @unique
  delivery_year              String?
  approval_status            approval_status @default(draft)
  project                    project?
  mom_reconciles             document?       @relation("MOM_RECONCILES", fields: [mom_reconciles_id], references: [id])
  nde_report_project         document?       @relation("NDE_REPORT_PROJECT", fields: [nde_report_project_id], references: [id])
  nde_revenue_recognition    document?       @relation("NDE_REVENUE_RECOGNITION", fields: [nde_revenue_recognition_id], references: [id])
  nps                        document?       @relation("NPS", fields: [nps_id], references: [id])
  report_project             document?       @relation("REPORT_PROJECT", fields: [report_project_id], references: [id])
}

enum approval_status {
  draft
  waiting
  approved
  declined
}

model document {
  id                      String             @id @default(uuid())
  original_name           String
  document_name           String
  document_type           document_type
  mime_type               String
  location                String
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt
  deleted_at              DateTime?
  nde_revenue_recognition project_close_out? @relation("MOM_RECONCILES")
  nde_report_project      project_close_out? @relation("NDE_REPORT_PROJECT")
  mom_reconciles          project_close_out? @relation("NDE_REVENUE_RECOGNITION")
  nps                     project_close_out? @relation("NPS")
  report_project          project_close_out? @relation("REPORT_PROJECT")
  nde_project_drop        project_drop?      @relation("NDE_PROJECT_DROP")
  lir_requirement         project_init?      @relation("LIR_REQUIREMENT")
  mom_req                 project_init?      @relation("MOM_REQ")
  nde_determination       project_init?      @relation("NDE_DETERMINATION")
  nde_request             project_init?      @relation("NDE_REQUEST")
  baa                     project_ongoing?   @relation("BAA")
  bast                    project_ongoing?   @relation("BAST")
  mom_readiness           project_ongoing?   @relation("MOM_READINESS")
  nde_confirmation        project_ongoing?   @relation("NDE_CONFIRMATION")
  nde_req_cfu_to_mid      project_ongoing?   @relation("NDE_REQ_CFU_TO_MID")
  nde_req_mid_to_tcuc     project_ongoing?   @relation("NDE_REQ_MID_TO_TCUC")
}

model notification {
  id          Int       @id @default(autoincrement())
  header      String
  content     String
  category    String
  url         String
  read        Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  receiver_id String
  sender_id   String?
  deleted_at  DateTime?
  receiver    users     @relation("RECEIVER", fields: [receiver_id], references: [user_id])
  sender      users?    @relation("SENDER", fields: [sender_id], references: [user_id])
}

model comment {
  id           Int          @id @default(autoincrement())
  user_id      String
  comment      String
  comment_type comment_type @default(comment)
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  project_id   String       @unique
  deleted_at   DateTime?
  project      project      @relation(fields: [project_id], references: [id])
  user         users        @relation(fields: [user_id], references: [user_id])
}

enum comment_type {
  comment
  log
}

model project_solution {
  id              String                    @id @default(uuid())
  solution_name   String
  created_at      DateTime                  @default(now())
  updated_at      DateTime                  @updatedAt
  deleted_at      DateTime?
  project         project?
  solution_detail project_solution_detail[]
}

model project_solution_detail {
  id                  String           @id @default(uuid())
  product_id          Int
  package_id          Int
  project_solution_id String
  package             packages         @relation(fields: [package_id], references: [id])
  product             product          @relation(fields: [product_id], references: [id])
  project_solution    project_solution @relation(fields: [project_solution_id], references: [id])
}

model product {
  id                      Int                       @id @default(autoincrement())
  category_id             Int
  taxonomy_id             Int
  unit_id                 String
  year                    Int
  name                    String
  branding                String
  evidence_tariff         String
  evidence_product        String
  playbook                String
  product_profile         String
  is_active               Boolean
  progress_enum           progress_enum             @default(aquisition)
  offerings               offering[]
  operating_model         operating_model[]
  packages                packages[]
  category                category                  @relation(fields: [category_id], references: [category_id])
  taxonomy                taxonomy                  @relation(fields: [taxonomy_id], references: [taxonomy_id])
  units                   units                     @relation(fields: [unit_id], references: [unit_id])
  product_services        product_services[]
  product_use_case        product_use_case[]
  project_solution_detail project_solution_detail[]
  segment_targeting       segment_targeting[]
  stpdb                   stpdb[]
  types                   type[]
}

//  Authentication Schema
model users {
  user_id               String @id @default(uuid())
  units_name            String // foreign key of units
  level_name            String // foreign key of levels
  access_credentials_id String @unique // foreign key of login_credentials
  team_name             String //  Foreign key of teams

  // Relations section
  unit_leader        unit_leader? // 1 to 1 relation with unit_leader
  units              units              @relation(fields: [units_name], references: [units_name]) // 1 to Many relation with units
  levels             levels             @relation(fields: [level_name], references: [level_name]) // 1 to Many relation with levels
  access_credentials access_credentials @relation(fields: [access_credentials_id], references: [access_credentials_id]) // 1 to 1 relation with login_credentials
  teams              teams              @relation(fields: [team_name], references: [team_name]) // 1 to Many relation with teams

  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  user_as_creator  project[]      @relation("CREATOR")
  user_as_updater  project[]      @relation("UPDATER")
  user_as_sender   notification[] @relation("SENDER")
  user_as_receiver notification[] @relation("RECEIVER")
  comment          comment[]
}

model access_credentials {
  access_credentials_id String @id @default(uuid())
  user_name             String
  email                 String @unique
  password              String

  // Relations section
  users         users?
  refresh_token refresh_token[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model refresh_token {
  id                    String @id @unique @default(uuid())
  hashed_token          String
  access_credentials_id String

  // Relations section
  access_credentials access_credentials @relation(fields: [access_credentials_id], references: [access_credentials_id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// Insert a default data named '-'
model units {
  unit_id     String       @id @default(uuid())
  units_name  String       @unique
  users       users[] // 1 to many relation with users
  unit_leader unit_leader? // 1 to 1 relation with unit_leader
  product     product[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model teams {
  team_id   String @id @default(uuid())
  team_name String @unique

  // Relations section
  users users[] //   1 to many relation with users

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// Add new entity named unit_leader
model unit_leader {
  leader_id  String @id @default(uuid())
  user_id    String @unique //  Foreign key of user
  units_name String @unique // Foreign key of unit

  // Relations section
  users users @relation(fields: [user_id], references: [user_id])
  units units @relation(fields: [units_name], references: [units_name])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model levels {
  level_id   String @id @default(uuid())
  level_name String @unique

  // Relations section
  users users[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model taxonomy {
  taxonomy_id   Int       @id @default(autoincrement())
  name          String
  taxonomy_desc String
  product       product[]
}

model category {
  category_id   Int       @id @default(autoincrement())
  name          String
  category_desc String
  product       product[]
}

model differentiation {
  dif_id                 Int                      @id @default(autoincrement())
  content                String
  context                String
  dif_enabler_collection dif_enabler_collection[]
  stpdb                  stpdb[]
}

model dif_enabler_collection {
  dif_enabler_collection_id Int             @id @default(autoincrement())
  point_description         String
  dif_id                    Int
  differentiation           differentiation @relation(fields: [dif_id], references: [dif_id])
}

model stpdb {
  stpdb_id                Int                 @id @default(autoincrement())
  product_id              Int
  dif_id                  Int
  branding                String
  positioning_description String
  segment_targeting       segment_targeting[]
  st_positioning          st_positioning[]
  differentiation         differentiation     @relation(fields: [dif_id], references: [dif_id])
  product                 product             @relation(fields: [product_id], references: [id])
}

model product_services {
  ps_id       Int     @id @default(autoincrement())
  product_id  Int
  name        String
  description String
  product     product @relation(fields: [product_id], references: [id])
}

model product_use_case {
  puc_id     Int     @id @default(autoincrement())
  product_id Int
  logo       String
  desc       String
  product    product @relation(fields: [product_id], references: [id])
}

model operating_model {
  om_id            Int                @id @default(autoincrement())
  product_id       Int
  partnership      String
  om_business_flow om_business_flow[]
  om_information   om_information[]
  om_location      om_location[]
  om_mgt_systems   om_mgt_systems[]
  om_supplier      om_supplier[]
  product          product            @relation(fields: [product_id], references: [id])
}

model om_business_flow {
  ombf_id          Int                @id @default(autoincrement())
  om_id            Int
  operator         String
  om_bus_flow_node om_bus_flow_node[]
  operating_model  operating_model    @relation(fields: [om_id], references: [om_id])
}

model om_supplier {
  oms_id          Int             @id @default(autoincrement())
  om_id           Int
  name            String
  description     String
  operating_model operating_model @relation(fields: [om_id], references: [om_id])
}

model om_location {
  oml_id          Int             @id @default(autoincrement())
  om_id           Int
  location        String
  operating_model operating_model @relation(fields: [om_id], references: [om_id])
}

model om_mgt_systems {
  omms_id         Int             @id @default(autoincrement())
  om_id           Int
  name            String
  operating_model operating_model @relation(fields: [om_id], references: [om_id])
}

model om_information {
  omi_id          Int             @id @default(autoincrement())
  om_id           Int
  scope           String
  om_info_node    om_info_node[]
  operating_model operating_model @relation(fields: [om_id], references: [om_id])
}

model om_bus_flow_node {
  ombfn_id         Int              @id @default(autoincrement())
  ombf_id          Int
  desc             String
  position         Int
  om_business_flow om_business_flow @relation(fields: [ombf_id], references: [ombf_id])
}

model om_info_node {
  omin_id        Int            @id @default(autoincrement())
  omi_id         Int
  description    String
  om_information om_information @relation(fields: [omi_id], references: [omi_id])
}

model segment_targeting {
  st_id             Int                 @id @default(autoincrement())
  product_id        Int
  stpdb_id          Int
  desc              String
  product           product             @relation(fields: [product_id], references: [id])
  stpdb             stpdb               @relation(fields: [stpdb_id], references: [stpdb_id])
  st_future_growth  st_future_growth[]
  st_targeting_user st_targeting_user[]
}

model st_positioning {
  st_pos   Int    @id @default(autoincrement())
  stpdb_id Int
  logo     String
  x        Int
  y        Int
  stpdb    stpdb  @relation(fields: [stpdb_id], references: [stpdb_id])
}

model st_future_growth {
  stfg_id           Int               @id @default(autoincrement())
  st_id             Int
  user              String
  segment_targeting segment_targeting @relation(fields: [st_id], references: [st_id])
}

model st_targeting_user {
  sttu_id           Int               @id @default(autoincrement())
  st_id             Int
  user              String
  segment_targeting segment_targeting @relation(fields: [st_id], references: [st_id])
}

model packages {
  id                      Int                       @id @default(autoincrement())
  name                    String
  category                category_enum
  target_sales            Int                       @default(10)
  payback_period          Int                       @default(1)
  operational_time        Int                       @default(12)
  excess_capacity         Int                       @default(0)
  capex                   Float                     @default(0)
  opex                    Float                     @default(0)
  cogs                    Float                     @default(0)
  tariff                  Float                     @default(0)
  create_at               DateTime                  @default(now())
  update_at               DateTime                  @updatedAt
  delete_at               DateTime?
  product_id              Int
  data_package            data_package[]
  offering_packages       offering_package[]
  product                 product                   @relation(fields: [product_id], references: [id])
  project_solution_detail project_solution_detail[]
  totals                  total[]
}

model offering {
  id                Int                @id @default(autoincrement())
  offer_name        String
  product_id        Int
  product           product            @relation(fields: [product_id], references: [id])
  offering_packages offering_package[]
}

model offering_package {
  package_id  Int
  offering_id Int
  offering    offering @relation(fields: [offering_id], references: [id])
  package     packages @relation(fields: [package_id], references: [id])

  @@id([package_id, offering_id])
}

model type {
  id         String       @id @default(uuid())
  type       type_enum
  product_id Int
  categories categories[]
  totals     total[]
  product    product      @relation(fields: [product_id], references: [id])
}

model categories {
  id       Int    @id @default(autoincrement())
  category String
  type_id  String
  type     type   @relation(fields: [type_id], references: [id])
  data     data[]
}

model data {
  id           Int            @id @default(autoincrement())
  event_module String
  description  String?
  unit         String?
  code         String?
  grade        String?
  create_at    DateTime       @default(now())
  update_at    DateTime       @updatedAt
  delete_at    DateTime?
  category_id  Int
  components   components[]
  category     categories     @relation(fields: [category_id], references: [id])
  data_package data_package[]
}

model data_package {
  data_id     Int
  package_id  Int
  quantity    Int?
  frequency   Int?
  excess      Float?
  information String?
  data        data     @relation(fields: [data_id], references: [id])
  package     packages @relation(fields: [package_id], references: [id])

  @@id([data_id, package_id])
}

model components {
  id           Int       @id @default(autoincrement())
  name         String
  item         String?
  unit         Int?
  specs        String?
  priceperunit Float?
  quantity     Int?
  create_at    DateTime  @default(now())
  update_at    DateTime  @updatedAt
  delete_at    DateTime?
  data_id      Int
  data         data      @relation(fields: [data_id], references: [id])
}

model total {
  package_id Int
  type_id    String
  total      Float
  package    packages @relation(fields: [package_id], references: [id])
  type       type     @relation(fields: [type_id], references: [id])

  @@id([package_id, type_id])
}

enum pic_role_enum {
  LIRA
  external
  midfielder
}

enum project_status {
  initiation
  ongoing
  close_out
  hold
  drop
}

enum segment_enum {
  DGS
  DPS
  DSS
}

enum helix_enum {
  academy
  business
  goverment
  community
  tech_prov
  subsidiary
}

enum document_type {
  nde
  mom
  requirement
  baa
  bast
  report
  nps
}

enum progress_enum {
  aquisition
  activation
  retention
  referral
  revenue
}

enum category_enum {
  MAIN_FEATURES
  ADD_ON
}

enum type_enum {
  CAPEX
  OPEX
  CoGS
}
