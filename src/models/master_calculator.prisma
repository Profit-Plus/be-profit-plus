// Database configuration properties
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model product {
    id         Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    sheet sheet @relation(fields: [sheet_id], references: [id])
    sheet_id Int @unique

    product_sheet product_sheet[]
}

model sheet {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product          product?
    packages          packages[]
    type              type[]
    offering          offering[]
    product_sheet     product_sheet?
}

model product_sheet {
    id         Int      @id @default(autoincrement())
    nomor Int @unique
    limitation String
    recommendation String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    sheet sheet @relation(fields: [sheet_id], references: [id])
    taxonomy taxonomy @relation(fields: [taxonomy_id], references: [id])
    sub_taxonomy sub_taxonomy @relation(fields: [sub_taxonomy_id], references: [id])
    product product @relation(fields: [product_id], references: [id])
    sheet_id Int @unique
    taxonomy_id Int
    sub_taxonomy_id Int
    product_id Int

    pic_tarif pic_tarif[]
}

model taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product_sheet product_sheet[]
    sub_taxonomy  sub_taxonomy[]
}

model user {
    id        Int      @id @default(autoincrement())
    username  String   @unique
    role      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    pic_tarif pic_tarif[]
}

model pic_tarif {
    user user @relation(fields: [user_id], references: [id])
    user_id Int
    product_sheet product_sheet @relation(fields: [product_sheet_id], references: [id])
    product_sheet_id Int
    status pic_status_enum
    isChecked Boolean @default(false)

    @@id([user_id, product_sheet_id])
}

model sub_taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    taxonomy taxonomy @relation(fields: [taxonomy_id], references: [id])
    taxonomy_id Int

    product_sheet product_sheet[]
}

model packages {
    id               Int           @id @default(autoincrement())
    name             String
    category         category_enum // Main feature/Add on
    target_sales     Int           @default(10)
    payback_period   Int           @default(1)
    operational_time Int           @default(12)
    excess_capacity  Int           @default(0)
    capex            Float         @default(0)
    opex             Float         @default(0)
    cogs             Float         @default(0)
    tariff           Float         @default(0)
    create_at        DateTime      @default(now())
    update_at        DateTime      @updatedAt
    delete_at        DateTime?

    sheet           sheet          @relation(fields: [sheet_id], references: [id])
    sheet_id        Int
    offering_packages offering_package[]
    totals            total[]
    data_package      data_package[]
}

model offering {
    id              Int    @id @default(autoincrement())
    offer_name      String
    unit            offering_unit_enum @default(Unit)
    user_target     Int  @default(0)

    offering_packages offering_package[]
    sheet             sheet          @relation(fields: [sheet_id], references: [id])
    sheet_id        Int
}

model offering_package {
    package     packages @relation(fields: [package_id], references: [id])
    package_id  Int
    offering    offering @relation(fields: [offering_id], references: [id])
    offering_id Int
    package_status Boolean @default(false)

    @@id([package_id, offering_id])
}

model type {
    id   String    @id @default(uuid())
    type type_enum

    sheet    sheet      @relation(fields: [sheet_id], references: [id])
    sheet_id Int
    categories categories[]
    totals     total[]
}

model categories {
    id       Int    @id @default(autoincrement())
    category String

    type    type   @relation(fields: [type_id], references: [id])
    type_id String
    data    data[]
}

model data {
    id           Int       @id @default(autoincrement())
    event_module String
    description  String?
    unit         String?
    code         String?
    grade        String?
    create_at    DateTime  @default(now())
    update_at    DateTime  @updatedAt
    delete_at    DateTime?

    category     categories     @relation(fields: [category_id], references: [id])
    category_id  Int
    components   components[]
    data_package data_package[]
}

model data_package {
    data        data     @relation(fields: [data_id], references: [id])
    data_id     Int
    package     packages @relation(fields: [package_id], references: [id])
    package_id  Int
    quantity    Int?
    frequency   Int?
    excess      Float?
    information String?

    @@id([data_id, package_id])
}

model components {
    id           Int       @id @default(autoincrement())
    name         String
    item         String?
    unit         Int?
    specs        String?
    priceperunit Float?
    quantity     Int?
    create_at    DateTime  @default(now())
    update_at    DateTime  @updatedAt
    delete_at    DateTime?

    data    data @relation(fields: [data_id], references: [id])
    data_id Int
}

// Total cost for each type (capex/opex/cogs) in a package
model total {
    package    packages @relation(fields: [package_id], references: [id])
    package_id Int
    type       type     @relation(fields: [type_id], references: [id])
    type_id    String
    total      Float

    @@id([package_id, type_id])
}

enum category_enum {
    MAIN_FEATURES
    ADD_ON
}

enum type_enum {
    CAPEX
    OPEX
    CoGS
}

enum tariff_status_enum {
    Accepted
    Rejected
    NeedApproval
    None
}

enum pic_status_enum {
    Drafter
    Reviewer
    Approver
    Requester
    Owner
}

enum offering_unit_enum {
    Unit
    Package
}