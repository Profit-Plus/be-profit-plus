// Database configuration properties
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model product {
    id         Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    sheet sheet @relation(fields: [sheet_id], references: [id])
    sheet_id Int @unique

    product_sheet product_sheet[]
    ssos sso[]
}

model sso{
    id          Int      @id @default(autoincrement())
    time_start     String?
    time_end       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    business_model bussines_model_enum @default(Subscription)
    year           Int @default(2024)
    status        String @default("Draft")
    status_hold   Boolean @default(false)
    data_collection Boolean @default(false)
    data_calculation Boolean @default(false)
    draft_tariff_validation Boolean @default(false)
    presentation_draft_tariff Boolean @default(false)
    request_draft_tariff Boolean @default(false)
    NDE_determination_tariff Boolean @default(false)
    work_time DateTime? @default(now())
    archivement Int @default(0)
    description String @default("")
    
    sheet_id Int @default(1)
    sheet sheet @relation(fields: [sheet_id], references: [id])
    product_id Int @default(1)
    product product @relation(fields: [product_id], references: [id])
    requester_id Int @default(1)
    requester unit @relation("requester", fields: [requester_id], references: [id])
    drafter_id Int @default(1)
    pic user @relation("pic", fields: [drafter_id], references: [id])
    owner_id Int @default(1)
    owner unit @relation("owner",fields: [owner_id], references: [id])
}

model sheet {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product          product?
    packages          packages[]
    type              type[]
    offering          offering[]
    product_sheet     product_sheet?
    sso               sso[]
}

model product_sheet {
    id         Int      @id @default(autoincrement())
    nomor Int @unique @default(0)
    limitation String @default("")
    recommendation String @default("")
    description String @default("")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    sheet sheet                 @relation(fields: [sheet_id], references: [id])
    sheet_id Int                @unique
    taxonomy taxonomy           @relation(fields: [taxonomy_id], references: [id])
    taxonomy_id Int
    sub_taxonomy sub_taxonomy   @relation(fields: [sub_taxonomy_id], references: [id])
    sub_taxonomy_id Int @default(1)
    product product             @relation(fields: [product_id], references: [id])
    product_id Int  @default(1)
    requester unit             @relation("requester", fields: [requester_id], references: [id])
    requester_id Int @default(1)
    requester_status Boolean @default(false)
    owner unit                 @relation("owner", fields: [owner_id], references: [id])
    owner_id Int @default(1)
    owner_status Boolean @default(false)
    drafer user                @relation("drafter",fields: [drafter_id], references: [id])
    drafter_id Int @default(1)
    drafter_status Boolean @default(false)
    reviewer user              @relation("reviewer",fields: [reviewer_id], references: [id])
    reviewer_id Int @default(1)
    reviewer_status Boolean @default(false)
    approver user              @relation("approver",fields: [approver_id], references: [id])
    approver_id Int @default(1)
    approver_status Boolean @default(false)
}

model unit {
    id          Int      @id @default(autoincrement())
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product_sheets_requested product_sheet[] @relation("requester")
    product_sheets_owned product_sheet[] @relation("owner")
    sso_requested sso[] @relation("requester")
    sso_owned sso[] @relation("owner")
}

model taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product_sheet product_sheet[]
    sub_taxonomy  sub_taxonomy[]
}

model user {
    id        Int      @id @default(autoincrement())
    username  String   @unique @default("-")
    role      String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    drafter product_sheet[] @relation("drafter")
    reviewer product_sheet[] @relation("reviewer")
    approver product_sheet[] @relation("approver")
    pic_sso sso[] @relation("pic")
}

model sub_taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    taxonomy taxonomy @relation(fields: [taxonomy_id], references: [id])
    taxonomy_id Int

    product_sheet product_sheet[]
}

model packages {
    id               Int           @id @default(autoincrement())
    name             String
    category         category_enum // Main feature/Add on
    bussines_model   bussines_model_enum @default(Subscription)
    target_sales     Int           @default(10)
    satuan_target    satuan_target_enum @default(User)
    payback_period   Int           @default(1)
    operational_time Int           @default(12)
    excess_capacity  Int           @default(0)
    capex            Float         @default(0)
    opex             Float         @default(0)
    cogs             Float         @default(0)
    tariff           Float         @default(0)
    create_at        DateTime      @default(now())
    update_at        DateTime      @updatedAt
    delete_at        DateTime?

     offering_packages       offering_package[]
    totals                  total[]
    data_package            data_package[]
    sheets                  sheet?                   @relation(fields: [sheets_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheets_id               Int?

}

model offering {
    id              Int    @id @default(autoincrement())
    offer_name      String
    unit            offering_unit_enum @default(Unit)
    user_target     Int  @default(0)

    offering_packages offering_package[]
     sheets            sheet?            @relation(fields: [sheets_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheets_id         Int?
}

model offering_package {
    package     packages @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    package_id  Int
    offering    offering @relation(fields: [offering_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offering_id Int
    package_status Boolean @default(false)

    @@id([package_id, offering_id])
}

model type {
    id   String    @id @default(uuid())
    type type_enum

    categories categories[]
    totals     total[]
    sheets     sheet?      @relation(fields: [sheets_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheets_id  Int?
}

model categories {
    id       Int    @id @default(autoincrement())
    category String

    type          type            @relation(fields: [type_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    type_id       String
    category_data category_data[]
    data          data[]
}

model data {
    id            Int       @id @default(autoincrement())
    event_module  String
    description   String?
    unit          String?
    code          String?
    grade         String?
    average_price Float?
    create_at     DateTime  @default(now())
    update_at     DateTime  @updatedAt
    delete_at     DateTime?

    category     categories     @relation(fields: [category_id], references: [id])
    category_id  Int
    components   components[]
    data_package data_package[]
    category_data category_data[]
}

model category_data {
    data        data       @relation(fields: [data_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    data_id     Int
    category    categories @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    category_id Int

    @@id([data_id, category_id])
}

model data_package {
    data        data     @relation(fields: [data_id], references: [id], onDelete: Cascade)
    data_id     Int
    package     packages @relation(fields: [package_id], references: [id])
    package_id  Int
    quantity    Int?
    frequency   Int?
    excess      Float?
    information String?

    @@id([data_id, package_id])
}

model components {
    id           Int       @id @default(autoincrement())
    name         String
    item         String?
    unit         Int?
    specs        String?
    priceperunit Float?
    quantity     Int?
    create_at    DateTime  @default(now())
    update_at    DateTime  @updatedAt
    delete_at    DateTime?

    data    data @relation(fields: [data_id], references: [id], onDelete: Cascade)
    data_id Int
}

// Total cost for each type (capex/opex/cogs) in a package
model total {
    package    packages @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    package_id Int
    type       type     @relation(fields: [type_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    type_id    String
    total      Float

    @@id([package_id, type_id])
}

enum category_enum {
    MAIN_FEATURES
    ADD_ON
}

enum type_enum {
    CAPEX
    OPEX
    COGS
}

enum tariff_status_enum {
    Accepted
    Rejected
    NeedApproval
    None
}

enum offering_unit_enum {
    Unit
    Package
}

enum bussines_model_enum {
    Subscription
    One_Time_Charge
}

enum satuan_target_enum {
    User
    Unit
    Project
}