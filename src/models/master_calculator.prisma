// Database configuration properties
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model product {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    sheet    sheet @relation(fields: [sheet_id], references: [id])
    sheet_id Int   @unique

    product_sheet product_sheet[]
    ssos          sso[]
}

model sso {
    id                                Int                 @id @default(autoincrement())
    time_start                        String?
    time_end                          String?
    createdAt                         DateTime            @default(now())
    updatedAt                         DateTime            @updatedAt
    business_model                    business_model_enum @default(Subscription)
    year                              Int                 @default(2024)
    status                            String              @default("Draft")
    status_hold                       Boolean             @default(false)
    data_collection                   Int                 @default(0)
    data_collection_boolean           Boolean             @default(false)
    data_calculation                  Int                 @default(0)
    data_calculation_boolean          Boolean             @default(false)
    draft_tariff_validation           Int                 @default(0)
    draft_tariff_validation_boolean   Boolean             @default(false)
    presentation_draft_tariff         Int                 @default(0)
    presentation_draft_tariff_boolean Boolean             @default(false)
    request_draft_tariff              Int                 @default(0)
    request_draft_tariff_boolean      Boolean             @default(false)
    NDE_determination_tariff          Int                 @default(0)
    NDE_determination_tariff_boolean  Boolean             @default(false)
    work_time                         String?             @default("2 Hari")
    work_time_num                     Int                 @default(1)
    achievement                       Int                 @default(0)
    progress                          Int                 @default(0)
    description                       String              @default("")
    evidence_tariff_link              String              @default("docs.google.com")
    evidence_tariff_text              String              @default("Link")

    sheet_id     Int     @default(1)
    sheet        sheet   @relation(fields: [sheet_id], references: [id])
    product_id   Int     @default(1)
    product      product @relation(fields: [product_id], references: [id])
    requester_id Int     @default(1)
    requester    unit    @relation("requester", fields: [requester_id], references: [id])
    drafter_id   Int     @default(1)
    pic          user    @relation("pic", fields: [drafter_id], references: [id])
    owner_id     Int     @default(1)
    owner        unit    @relation("owner", fields: [owner_id], references: [id])
}

model sheet {
    id          Int      @id @default(autoincrement())
    name        String
    description String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product       product?
    tariff_status tariff_status_enum @default(None) /////////////////
    packages      packages[]
    type          type[]
    offering      offering[]
    product_sheet product_sheet?
    sso           sso[]
}

model product_sheet {
    id             Int      @id @default(autoincrement())
    nomor          Int      @unique @default(0)
    limitation     String   @default("")
    recommendation String   @default("")
    description    String   @default("")
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    sheet            sheet        @relation(fields: [sheet_id], references: [id])
    sheet_id         Int          @unique
    taxonomy         taxonomy     @relation(fields: [taxonomy_id], references: [id])
    taxonomy_id      Int
    sub_taxonomy     sub_taxonomy @relation(fields: [sub_taxonomy_id], references: [id])
    sub_taxonomy_id  Int          @default(1)
    product          product      @relation(fields: [product_id], references: [id])
    product_id       Int          @default(1)
    requester        unit         @relation("requester", fields: [requester_id], references: [id])
    requester_id     Int          @default(1)
    requester_status Boolean      @default(false)
    owner            unit         @relation("owner", fields: [owner_id], references: [id])
    owner_id         Int          @default(1)
    owner_status     Boolean      @default(false)
    drafter          user         @relation("drafter", fields: [drafter_id], references: [id])
    drafter_id       Int          @default(1)
    drafter_status   Boolean      @default(false)
    reviewer         user         @relation("reviewer", fields: [reviewer_id], references: [id])
    reviewer_id      Int          @default(1)
    reviewer_status  Boolean      @default(false)
    approver         user         @relation("approver", fields: [approver_id], references: [id])
    approver_id      Int          @default(1)
    approver_status  Boolean      @default(false)
}

model unit {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    product_sheets_requested product_sheet[] @relation("requester")
    product_sheets_owned     product_sheet[] @relation("owner")
    sso_requested            sso[]           @relation("requester")
    sso_owned                sso[]           @relation("owner")
}

model taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    product_sheet product_sheet[]
    sub_taxonomy  sub_taxonomy[]
}

model user {
    id        Int      @id @default(autoincrement())
    username  String   @unique @default("-")
    role      String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    drafter  product_sheet[] @relation("drafter")
    reviewer product_sheet[] @relation("reviewer")
    approver product_sheet[] @relation("approver")
    pic_sso  sso[]           @relation("pic")
}

model sub_taxonomy {
    id          Int      @id @default(autoincrement())
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    taxonomy    taxonomy @relation(fields: [taxonomy_id], references: [id])
    taxonomy_id Int

    product_sheet product_sheet[]
}

model packages {
    id               Int                 @id @default(autoincrement())
    name             String
    category         category_enum
    business_model   business_model_enum @default(Subscription)
    target_sales     Int                 @default(10)
    unit_target      unit_target_enum    @default(User)
    payback_period   Int                 @default(1)
    operational_time Int                 @default(12)
    excess_capacity  Int                 @default(0)
    capex            Float               @default(0)
    opex             Float               @default(0)
    cogs             Float               @default(0)
    tariff           Float               @default(0)
    createdAt        DateTime            @default(now())
    updatedAt        DateTime            @updatedAt
    deletedAt        DateTime?

    offering_package offering_package[]
    totals           total[]
    data_package     data_package[]
    sheet            sheet?             @relation(fields: [sheet_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheet_id         Int?
}

model offering {
    id          Int                @id @default(autoincrement())
    offer_name  String
    unit        offering_unit_enum @default(Unit)
    user_target Int                @default(0)

    offering_packages offering_package[]
    sheet             sheet?             @relation(fields: [sheet_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheet_id          Int?
}

model offering_package {
    package        packages @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    package_id     Int
    offering       offering @relation(fields: [offering_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    offering_id    Int
    package_status Boolean  @default(false)

    @@id([package_id, offering_id])
}

model type {
    id   String    @id @default(uuid())
    type type_enum

    categories categories[]
    totals     total[]
    sheet      sheet?       @relation(fields: [sheet_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    sheet_id   Int?
}

model categories {
    id       Int    @id @default(autoincrement())
    category String

    type          type            @relation(fields: [type_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    type_id       String
    category_data category_data[]
}

model data {
    id            Int       @id @default(autoincrement())
    event_module  String
    description   String?
    unit          String?
    code          String?
    grade         String?
    average_price Float?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    deletedAt     DateTime?

    components     components[]
    data_package   data_package[]
    category_data  category_data[]
    data_component data_component[]
}

model component {
    id             Int       @id @default(autoincrement())
    name           String
    code           String?
    item           String?
    unit           Int?
    specs          String?
    price_per_unit Float?
    quantity       Int?
    note           String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    deletedAt      DateTime?

    data_relation data_component[]
}

model data_component {
    data_id      Int
    component_id Int
    createdAt    DateTime @default(now())

    data      data      @relation(fields: [data_id], references: [id])
    component component @relation(fields: [component_id], references: [id])

    @@id([data_id, component_id])
}

model category_data {
    data        data       @relation(fields: [data_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    data_id     Int
    category    categories @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    category_id Int

    @@id([data_id, category_id])
}

model data_package {
    data        data     @relation(fields: [data_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    data_id     Int
    package     packages @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    package_id  Int
    quantity    Int?
    frequency   Int?
    excess      Float?
    total       Float?
    information String?

    @@id([data_id, package_id])
}

model components {
    id           Int       @id @default(autoincrement())
    name         String
    item         String?
    unit         Int?
    specs        String?
    priceperunit Float?
    quantity     Int?
    create_at    DateTime  @default(now())
    update_at    DateTime  @updatedAt
    delete_at    DateTime?

    data    data @relation(fields: [data_id], references: [id])
    data_id Int
}

// Total cost for each type (capex/opex/cogs) in a package
model total {
    package    packages @relation(fields: [package_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    package_id Int
    type       type     @relation(fields: [type_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
    type_id    String
    total      Float

    @@id([package_id, type_id])
}

enum category_enum {
    MAIN_FEATURES
    ADD_ON
}

enum type_enum {
    CAPEX
    OPEX
    COGS
}

enum tariff_status_enum {
    Accepted
    Rejected
    NeedApproval
    None
}

enum offering_unit_enum {
    Unit
    Package
}

enum business_model_enum {
    Subscription
    OTC
    Licensing
    Freemium
    Pay_per_Use
}

enum unit_target_enum {
    User
    Unit
    Project
}
